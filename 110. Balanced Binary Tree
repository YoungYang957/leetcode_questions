# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

# thoughts: if we have two level which are uncomplete then its not balanced
# thought after this: how do we 
# not feasbile 
# another approach: recursively compares the left and right tree 
# the reason we can't use the original method is because the we can only return true or false


class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
         
        def dfs(root):
            if not root:
                return [True, 0]

            left, right = dfs(root.left),dfs(root.right)

            balenced = left[0] and right[0] and abs(left[1]-right[1]) <=1 #a boolen

            return [balenced, 1+max(left[1],right[1])]

        return dfs(root)[0]
