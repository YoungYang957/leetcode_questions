#Observed the question, theres situtaion like : "[()]" and we must detect it.
#We then think of using stacks and in the end checking if the stack is empty to decide if it is true
#another is return not an empty list is true and return not not an empty list makes it false



class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        for char in s:
            if char == '(' or char == '{' or char == '[':
                stack.append(char)
            else:
                if not stack:
                    return False
                if char == ')' and stack[-1] == '(':
                    stack.pop()
                elif char == '}' and stack[-1] == '{':
                    stack.pop()
                elif char == ']' and stack[-1] == '[':
                    stack.pop()
                else:
                    return False
        return not stack
        
        
        
        
        
        
        
        
        
        
        
        
        
        
         # length = len(s)
        # if length %2 !=0:
        #     return False
        
        # for i in range(1,len(s),2):
        #     if s[i] == "[" or s[i] == "(" or s[i] == "{":
        #         return False

        # for i in range(0,len(s)-1):
        #     if s[i] == "(" and s[i+1] != ")":
        #         return False
        #     else:
        #         return True
            
        #     if s[i] == "{" and s[i+1] != "}":
        #         return False
        #     else:
        #         return True

        #     if s[i] == "[" and s[i+1] != "]":
        #         return False
        #     else:
        #         return True
